package com.ss.leetcode;

/**
 * LeetCode0005
 *
 * @author shisong
 * @date 2019/10/22
 */
public class LeetCode0041 {

    /*给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。
 进阶：你可以实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案吗？
 示例 1：
输入：nums = [1,2,0]
输出：3
 示例 2：
输入：nums = [3,4,-1,1]
输出：2
 示例 3：
输入：nums = [7,8,9,11,12]
输出：1
 提示：
 0 <= nums.length <= 300
 -231 <= nums[i] <= 231 - 1
 Related Topics 数组*/
    public static void main(String[] args) {
        int[] num = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300};
        int ints = firstMissingPositive(num);
        System.out.println(ints);

    }

    public static int firstMissingPositive(int[] nums) {
        int[] temp = new int[301];
        if(nums == null || nums.length == 0){
            return 1;
        }
        for (int i = 0; i < nums.length; i++) {
            if(nums[i] > 0 && nums[i]<= 300){
                temp[nums[i] -1]++;
            }
        }
        int result = 0;
        for (int i = 0; i < temp.length; i++) {
            if(temp[i] == 0){
                result = i;
                break;
            }
        }
        return result + 1;
    }

}
